import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { ArrowLeft, Sparkles, Volume2 } from 'lucide-react';
import Layout from '../components/Layout';
import { categories } from '../data/mockData';
import { api } from '@/lib/api';
import { useAuth } from '@/hooks/useAuth';
import { toast } from 'sonner';

export default function EditQuestionPage() {
  const navigate = useNavigate();
  const { id } = useParams();
  const [question, setQuestion] = useState('');
  const [answer, setAnswer] = useState('');
  const [category, setCategory] = useState('');
  const [tags, setTags] = useState('');
  const [isPublic, setIsPublic] = useState(false);
  const [isGeneratingAnswer, setIsGeneratingAnswer] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const { token } = useAuth();

  useEffect(() => {
    async function fetchQuestion() {
      if (!id || !token) return;

      try {
        const res = await api.get(`/getQuestionById/${id}`, token);
        const q = res.data;
        if (!q) throw new Error('No question data found');

        setQuestion(q.question);
        setAnswer(q.answer);
        setCategory(q.category);
        setTags((q.tags || []).join(', '));
        setIsPublic(q.isPublic || false);
        setIsLoading(false);
      } catch (err: any) {
        toast.error(err.message || 'Failed to load question');
        navigate('/dashboard');
        setIsLoading(false);
      }
    }

    fetchQuestion();
  }, [id, token, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const payload = {
      question,
      answer,
      category,
      tags: tags.split(',').map(tag => tag.trim()).filter(Boolean),
      isPublic,
    };

    try {
      await api.put(`/updateQuestion/${id}`, payload, token || undefined);
      toast.success('Question updated successfully!');
      navigate('/dashboard');
    } catch (err: any) {
      toast.error(err.message || 'Failed to update question');
    }
  };

  const handleGenerateAnswer = async () => {
    if (!question.trim()) {
      toast.error('Please enter a question first');
      return;
    }

    setIsGeneratingAnswer(true);
    try {
      const res = await api.post('/generateAIAnswer', { question }, token || undefined);
      const generatedAnswer = res.data || '';
      setAnswer(generatedAnswer);
      toast.success('Answer generated by AI!');
    } catch (err: any) {
      toast.error(err.message || 'Failed to generate answer');
    } finally {
      setIsGeneratingAnswer(false);
    }
  };


  return (
    <Layout>
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 pt-8">
        {isLoading ? (
          <div className="text-center py-16 text-gray-500 dark:text-gray-400">Loading...</div>
        ) : (
          <>
            <div className="flex items-center mb-8">
              <button
                onClick={() => navigate('/dashboard')}
                className="mr-4 p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
              >
                <ArrowLeft className="h-5 w-5" />
              </button>
              <div className="ml-2">
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Edit Question</h1>
                <p className="mt-2 text-gray-600 dark:text-gray-400">
                  Update your interview question
                </p>
              </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                <div className="space-y-6">
                  <div>
                    <label htmlFor="question" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Question *
                    </label>
                    <textarea
                      id="question"
                      required
                      rows={3}
                      value={question}
                      onChange={(e) => setQuestion(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                      placeholder="Enter your interview question..."
                    />
                  </div>

                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <label htmlFor="answer" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                        Answer *
                      </label>
                      <button
                        type="button"
                        onClick={handleGenerateAnswer}
                        disabled={isGeneratingAnswer}
                        className="inline-flex items-center px-3 py-1 text-sm bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 rounded-md hover:bg-purple-200 dark:hover:bg-purple-800 transition-colors disabled:opacity-50"
                      >
                        <Sparkles className="h-4 w-4 mr-1" />
                        {isGeneratingAnswer ? 'Generating...' : 'Regenerate with AI'}
                      </button>
                    </div>
                    <textarea
                      id="answer"
                      required
                      rows={6}
                      value={answer}
                      onChange={(e) => setAnswer(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                      placeholder="Enter your answer or generate one using AI..."
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label htmlFor="category" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Category *
                      </label>
                      <select
                        id="category"
                        required
                        value={category}
                        onChange={(e) => setCategory(e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Select a category</option>
                        {categories.map((cat) => (
                          <option key={cat} value={cat}>
                            {cat}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label htmlFor="tags" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Tags
                      </label>
                      <input
                        id="tags"
                        type="text"
                        value={tags}
                        onChange={(e) => setTags(e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Enter tags separated by commas"
                      />
                      <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                        Separate multiple tags with commas
                      </p>
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <input
                        id="isPublic"
                        type="checkbox"
                        checked={isPublic}
                        onChange={(e) => setIsPublic(e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded"
                      />
                      <label htmlFor="isPublic" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                        Make this question public
                      </label>
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex justify-end space-x-4">
                <button
                  type="button"
                  onClick={() => navigate('/dashboard')}
                  className="px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Update Question
                </button>
              </div>
            </form>
          </>
        )}
      </div>
    </Layout>
  );
}